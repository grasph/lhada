object object_name
  -> add addProjections in init() method
  -> define in analyze() method a variable with name object # object_name

cut cut_name
  -> define a function with name cut # cut_name

cut region
 -> add a counter (use also a histo?)

---
Change in LHADA format

add region entity
add cutflow keyword for the cut entity -> already in the table.

add format version field

specifies external objects. Limit to particles and vertices?

specifies allowed characters for functions: a-z,A-Z,_ for first letter, a-z,A-Z,0-9,_ for the next ones.

specify functions:
 1. 3 types: a. returning an vector of quadrivectors
             b. returning a double to cut on
	     c. returning a double for weight
option to use random instead of weights?	     

specify cut line: operation allowed, precedence, etc..
define order of blocks: as in LHADA example
define attributes of a candidate. Proposal: pt, eta, y, px, py, pz, m, pdgid, charge, phi, theta
how to implement ht? As object with a single element (-> require [1] to refers to it)? As function, but then functions need access to the particles..
use a standard for particle and collection of particles to be passed to functions. Only list of method should be defined.
how to do apply in an object block using different object: e.g. ana_mt2. Alternative, do not require take and give access to all objets to the functions.

LHADA states the table as optionnal, but the analysis it miss to describes the analysis without the table as we miss the applied cut.

---
opened questions:

1. do we need efficiency for background? E.g., no efficiency for lepton veto currently provided by CMS SUSY group
how to deal with "take external"
 Option 1. set a list of std objects
 Option 2. limit to all final state particles
 Option 3. all final state particles + some std collections defined in LHADA format

2. passing collection to selection function. It is now implicit. It requires the function to be specific for the object block.xnb

